using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 * Code generated by following a tutorial from code monkey, it has been VERY slightly tweaked for my purposes.
 * Unitycodemonkey.com. 2018. Code Monkey - How To Take A Screenshot. [online] Available at: <https://unitycodemonkey.com/video.php?v=lT-SRLKUe5k> (Accessed 2 May 2020).
 */
public class Photograph : MonoBehaviour
{
    Camera cam;

    // Aspect of screenshot
    public int width = 1280;
    public int height = 720;

    string curRealTime;

    int droneNumber = 0;

    bool capture = false;
    public int screenshotsTaken = 0;
    bool experimental = false;

    private void Awake()
    {
        cam = gameObject.GetComponent<Camera>();
    }

    private void OnPostRender()
    {
        if (capture)
        {
            // Reset capture flag
            capture = false;

            // Load temporary texture to render texture
            RenderTexture renderTex = cam.targetTexture;

            // Create a new texture and a rectangle using the temporary texture info, then read the pixels from that rectangle and apply them to the render result texture
            Texture2D renderResult = new Texture2D(renderTex.width, renderTex.height, TextureFormat.ARGB32, false);
            Rect rect = new Rect(0, 0, renderTex.width, renderTex.height);
            renderResult.ReadPixels(rect, 0, 0);

            // Convert to Image
            byte[] pixelArray = renderResult.EncodeToPNG();

            if (!experimental)
            {
                System.IO.File.WriteAllBytes(Application.dataPath + "/Screenshots/" + curRealTime + "/drone_" + droneNumber + "_Screenshot_" + screenshotsTaken.ToString() + ".png", pixelArray);
            } else
            {
                if(screenshotsTaken < 10)
                {
                    System.IO.File.WriteAllBytes(Application.dataPath + "/Screenshots/" + curRealTime + "/drone_" + droneNumber + "_Screenshot_0" + screenshotsTaken.ToString() + ".png", pixelArray);
                } else
                {
                    System.IO.File.WriteAllBytes(Application.dataPath + "/Screenshots/" + curRealTime + "/drone_" + droneNumber + "_Screenshot_" + screenshotsTaken.ToString() + ".png", pixelArray);
                }
            }

            screenshotsTaken++;

            // Clean up
            RenderTexture.ReleaseTemporary(renderTex);
            cam.targetTexture = null;
        }   
    }

    public void TakeScreenshot(int width, int height, int droneNum, string currentRealTime, bool ex = false)
    {
        curRealTime = currentRealTime;
        droneNumber = droneNum;
        experimental = ex;

        // Set the camera texture to a temporary texture, which is viewport of camera (width, height)
        cam.targetTexture = RenderTexture.GetTemporary(width, height, 16);
        capture = true;
    }
}
